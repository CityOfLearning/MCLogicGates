import com.amazonaws.auth.policy.Policy
import com.amazonaws.auth.policy.Principal
import com.amazonaws.auth.policy.Statement
import com.amazonaws.auth.policy.actions.S3Actions
import com.amazonaws.auth.policy.resources.S3BucketResource
import com.amazonaws.auth.policy.resources.S3ObjectResource
import com.amazonaws.services.s3.model.ObjectMetadata

import jp.classmethod.aws.gradle.s3.SyncTask

// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
		mavenCentral()		
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
		classpath "jp.classmethod.aws:gradle-aws-plugin:0.+"
    }
}

repositories {
    jcenter()
		
	maven { 
		name = "jitpack"
		url "https://jitpack.io" 
	}
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'
apply plugin: "jp.classmethod.aws.s3"

aws {
	profileName = "minecraft"
	region = "us-east-1"
}

def myBucketName = 'broad-participation'

/*
// for people who want stable - not yet functional for MC 1.8.8 - we require the forgegradle 2.1 snapshot
plugins {
    id "net.minecraftforge.gradle.forge" version "2.0.2"
}
*/
version = "1.8.9-dyn"
group = "com.github.rainang.logicgates"
archivesBaseName = "logicgates"

minecraft {
    version = "1.8.9-11.15.1.1902-1.8.9"
    runDir = "run"

    replace '@version@', project.version
    replace '@mcversion@', project.minecraft.version
    replaceIn 'LogicGates.java'

    mappings = "stable_22"
	makeObfSourceJar = false
}

jar {	
	from ('src/main/java/assets'){
    	into 'assets'
    }
	
    from (sourceSets.main.output) {
        setDuplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    }
}

dependencies {

}

processResources
        {
            inputs.property "version", project.version
            inputs.property "mcversion", project.minecraft.version

            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'

                expand 'version': project.version, 'mcversion': project.minecraft.version
            }

            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
        }
		
compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

reobfJar.doLast {
    ant.checksum file: tasks.jar.archivePath
}

build.doLast {
	File jarFile = file('./build/libs/' + archivesBaseName + '-' + version +".jar")
	File md5File = file('./build/libs/' + archivesBaseName + '-' + version +".jar.MD5")
	jarFile.renameTo(file('./build/libs/' + archivesBaseName+".jar"))
	md5File.renameTo(file('./build/libs/' + archivesBaseName+".MD5"))
}

task publish(type: SyncTask, dependsOn: build) {
	source file('./build/libs/') //must be a directory
	bucketName myBucketName
	
	metadataProvider { bucket, key, file ->
	
		ObjectMetadata m = new ObjectMetadata()
		m.setCacheControl("no-cache, no-store")
		return m
	}
	
	setAcl 'PublicRead'
}
